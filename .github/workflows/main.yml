name: Go Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build Go Application and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.20.0

      - name: Add SSH key to SSH agent
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<<"${{ secrets.SSH_PRIVATE_KEY }}"
          ssh-add -l  # List loaded keys (for debugging)

      - name: Remove Old Deployment in DigitalOcean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: chidi  # Use the "chidi" username
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          key_type: rsa
          script: |
            set -e
            cd /tmp/my-database  # Change the directory as needed
            echo "Current directory: $(pwd)"
            ls -la
            rm -rf *
      
      - name: Copy Application Files to Target System
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: ./*
          target: /tmp/my-database

      - name: Build Docker Image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          key_type: rsa
          script: |
            set -e
            cd /tmp/my-database

            # Stop and remove containers with specific labels
            docker stop my-database-app || true
            docker rm my-database-app || true

            # Remove images with specific labels
            docker rmi my-database-app || true

            # Build and run Docker image with encapsulated environment
            docker build -t my-database-app .
            docker run -d --name my-database-app --network my-network -p 8080:8080 my-database-app
